var Euler = {
	Problems: []
};



/*

PROBLEM 1

Multiples of 3 and 5

If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
Find the sum of all the multiples of 3 or 5 below 1000.

---
Loops through all numbers and checks if they are either a multiple of 3 or 5, if true it wil add to the sum variable
---

*/

Euler.Problems[0] = function(){

	var sum = 0;

	for (var i = 0, k = 1000; i < k; i++) {
		if( i % 3 == 0 || i % 5 == 0 ){
			sum += i;
		}
	}
	
	return sum;

};


/*

PROBLEM 2

Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

---
Seperate fibonacci function to be called outside of the for loop.
Memoized function is used to check if the result has already been calculate before
---

*/


Euler.Problems[1] = function(){

	var sum = 0,

	fibonacci = (function(){

		var cache = {};

		function fib(n){
			var val;

			if(n in cache){
				val = cache[n];
			} else{
				if( n <=1 ) val = 1;
				else( val = fib(n-1) + fib(n-2) );
				cache[n] = val;
			}
			return val;
		}

		return fib;

	})();


	for (var i = 0, k = 100; i < k; i++) {
		var fib = fibonacci(i);

		if( fib > 4e6 ) return sum;
		if( fib % 2 == 0 ){
			sum += fib;
		}

	}

};



/*
PROBLEM 3

The prime factors of 13195 are 5, 7, 13 and 29.
What is the largest prime factor of the number 600851475143 ?

---
Initialize the list
Loop through num, starting at 2, while each number is a *prime* push to list
reset n
return list
return the last item in list
---

*/

Euler.Problems[2] = function(){

	var primes = function(n){

		var list = [];

		for (var i = 2; i<=n; i++) {
			while( n % i == 0){
				list.push(i);
				n = n / i;
			}
		}

		return list;
	}

	var factors = primes(600851475143);
	var largest = factors[factors.length-1];

	return largest;

}


/*
	PROBLEM 4

	A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.
	Find the largest palindrome made from the product of two 3-digit numbers.
*/


Euler.Problems[3] = function(){}




Euler.Problems.forEach(function( problem, i ){
	console.log("Answer:" + ++i, problem() );
});








